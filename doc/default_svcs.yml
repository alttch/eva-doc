- nam: eva.aaa.acl
  exe: svc/eva-aaa-acl
  des: Default ACL service
  ins: by default with HMI (*--hmi*)
  txt: Base authorization service, see :doc:`/aaa` for more details.
  tpl: svc-tpl-aaa-acl.yml
  api: svc/aaa-acl/eapi.yml
- nam: eva.aaa.localauth
  exe: svc/eva-aaa-localauth
  des: Local user/key authentication service
  ins: by default with HMI (*--hmi*)
  txt: Local user/API key authentication service, see :doc:`/aaa` for more details.
  tpl: svc-tpl-aaa-localauth.yml
  api: svc/aaa-localauth/eapi.yml
- nam: eva.controller.enipN
  exe: svc/eva-controller-enip
  des: Ethernet/IP PLC controller gateway
  txt: Allows to communicate with Ethernet/IP-powered PLCs and other equipment.
  tpl: svc-tpl-controller-enip.yml
  api: svc/controller-enip/eapi.yml
- nam: eva.controller.modbusN
  exe: svc/eva-controller-modbus
  des: Modbus master controller
  txt: Allows to communicate with Modbus-powered PLCs and other equipment.
  tpl: svc-tpl-controller-modbus.yml
  api: svc/controller-modbus/eapi.yml
- nam: eva.svc.modbusN
  exe: svc/eva-svc-modbus-slave
  des: Modbus slave service
  txt: |
    Provides Modbus slave context.

    A :doc:`/svc/eva-controller-modbus` can be used later to pull the context
    and analyze its data (Modbus via ELBUS is highly recommended).
  tpl: svc-tpl-modbus-slave.yml
  api: svc/svc-modbus-slave/eapi.yml
- nam: eva.controller.py
  exe: venv/bin/eva4-svc-controller-py
  des: Python macros controller
  ins: py:eva4-controller-py
  txt: "Executor controller service for Python macros. See :doc:`/lmacro/py/python_macros`."
  tpl: svc-tpl-controller-py.yml
  api: svc/controller-py/eapi.yml
- nam: eva.controller.virtN
  exe: svc/eva-controller-virtual
  des: Virtual controller
  txt: |
    The virtual controller service allows to define virtual units and sensors,
    which can be used for automation tests, demos and other related purposes.
  tpl: svc-tpl-controller-virtual.yml
  api: svc/controller-virtual/eapi.yml
- nam: eva.filemgr.main
  des: File manager service
  exe: svc/eva-filemgr
  ins: always by default
  txt: |
    The file manager service allows to remotely deploy/undeploy files to/from
    runtime directory. The service is always installed by default, however can
    be removed/undeployed for the security purposes without affecting anything
    but file deployment.
  tpl: svc-tpl-filemgr.yml
  api: svc/filemgr/eapi.yml
- nam: eva.db.iN
  exe: svc/eva-db-influx
  des: InfluxDB state history
  txt: |
    Allows to store item states history in `InfluxDB
    <https://www.influxdata.com>`_, v1 and v2 protocols are supported.

    The service provides unified database EAPI.
  tpl: svc-tpl-db-influx.yml
  api: svc/db-influx/eapi.yml
- nam: eva.db.sN
  exe: svc/eva-db-sql
  des: SQL databases state history
  txt: |
    Allows to store item states history in SQL databases. Supported:

    * `SQLite <https://www.sqlite.org/>`_ (serverless)
    * `MySQL <https://www.mysql.com>`_
    * `PostgreSQL <https://www.postgresql.org>`_
    * Microsoft SQL Server (alpha)

    Dataframe filling requires tsdb extension (ts_extension configuration
    parameter) installed and chosen. The following extensions are supported:

    * `Timescale <https://www.timescale.com>`_ (PostgreSQL)

    The service provides unified database EAPI.
  tpl: svc-tpl-db-sql.yml
  api: svc/db-sql/eapi.yml
- nam: eva.svc.expN
  exe: svc/eva-svc-expiration
  des: Item state expiration service
  txt: |
    Marks items as expired/error.

    Useful to create lvar timers (timers have status -1 when expired) or set
    error item states (items get status=1 if not updated for a long time, e.g.
    because of a data puller service crash).
  tpl: svc-tpl-expiration.yml
- nam: eva.svc.fwriterN
  exe: svc/eva-svc-filewriter
  des: Item state file writer (JSON/CSV)
  txt: |
    Allows to write item states into JSON/CSV text files.

    The files can be rotated with any external tool or manually. As soon as the
    file is rotated, a new one is created automatically.
  tpl: svc-tpl-filewriter.yml
  api: svc/svc-filewriter/eapi.yml
- nam: eva.hmi.default
  exe: svc/eva-hmi
  des: HMI service
  ins: "by default with *--hmi* arg"
  txt: |
    .. include:: /hmi/hmi.rst
  tpl: svc-tpl-hmi.yml
  api: svc/hmi/eapi.yml
  xtr: |
    .. include:: /hmi/hmi_xtra.rst
- nam: eva.svc.lockerN
  exe: svc/eva-svc-locker
  des: Shared lock service
  txt: Allows other services to work with shared locks
  tpl: svc-tpl-locker.yml
  api: svc/svc-locker/eapi.yml
- nam: eva.svc.mailer
  exe: svc/eva-svc-mailer
  des: Mailer service
  txt: Allows other services to send email notifications
  tpl: svc-tpl-mailer.yml
  api: svc/svc-mailer/eapi.yml
- nam: eva.svc.mirror
  exe: svc/eva-svc-mirror
  des: Mirror service
  txt: |
    Allows to host mirror for the current version of EVA ICS distribution and
    Python modules if venv is configured.

    Updating mirror files on the source node
    ========================================

    .. note::

        The files must be updated every time the source node is updated to a
        new version/build.

    Use either :ref:`eva-shell`:

    .. code:: shell

      eva mirror update

    or :ref:`eva-cloud-manager-cli`:

    .. code:: shell

      /opt/eva4/bin/eva-cloud-manager node mirror-update

    Configuring mirror on target nodes
    ==================================

    Use either :ref:`eva-shell`:

    .. code:: shell

      eva mirror set <URL>

    or :ref:`eva-cloud-manager-cli`:

    .. code:: shell

      /opt/eva4/bin/eva-cloud-manager node mirror-set <URL>

  tpl: svc-tpl-mirror.yml
- nam: eva.repl.N
  exe: svc/eva-repl
  des: Replication service
  txt: |
  tpl: svc-tpl-replication.yml
  api: svc/repl/eapi.yml
  txt: |
    .. include:: /repl/repl.rst
- nam: eva.repl.legacyN
  exe: venv/bin/eva4-svc-repl-legacy
  des: Legacy (V3) replication service
  ins: py:eva4-repl-legacy
  txt: |
    .. include:: /repl/repl_v3legacy.rst
  tpl: svc-tpl-replication-legacy.yml
  api: svc/repl-legacy/eapi.yml
